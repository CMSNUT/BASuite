"md/",
"NAMESPACE",
"DESCRIPTION",
"app.R"
),
appId = rsconnect::deployments(".")$appID,
lint = FALSE,
forceUpdate = TRUE
)
library(shiny)
library(flextable)
library(officer)
library(autoReg)
library(rrtable)
library(moonBook)
ui <- fluidPage(
# 使用htmlOutput来渲染flextable ----
htmlOutput("flextable_output"),
tags$hr(),
htmlOutput("flextable_output2"),
tags$hr(),
htmlOutput("html")
)
server <- function(input,output) {
# 使用htmlOutput来渲染flextable ----
# 创建一个flextable对象
my_table <- flextable(head(mtcars))
# 设置三线表样式
my_table <- set_table_properties(my_table, layout = "autofit")
my_table <- theme_booktabs(my_table)
# 将flextable转换为HTML
output$flextable_output <- renderUI({
# 将 flextable 转换为 HTML
html_table <- htmltools_value(my_table)
HTML(html_table[[3]])
})
# gaze 三线表 ----
# 创建一个flextable对象
# my_table2 <- flextable(gaze(sex~.,data=acs))
# my_table2 <- as_flextable(gaze(sex~.,data=acs))
my_table2 <- gaze(sex~.,data=acs) %>% myft()
# 设置三线表样式
my_table2 <- set_table_properties(my_table2, layout = "autofit")
my_table2 <- theme_booktabs(my_table2)
# 第2种方式 太麻烦
# my_table2 <- my_table2 %>%
#   # 移除所有边框
#   border_remove() %>%
#   # 添加顶线
#   border_outer(part = "all", border = fp_border(width = 1)) %>%
#   # 添加底线
#   border_inner_h(part = "body", border = fp_border(width = 1)) %>%
#   # 添加列标题下的分隔线
#   border_inner_h(part = "header", border = fp_border(width = 1))
# 将 flextable 转换为 HTML
html_table2 <- htmltools_value(my_table2)
output$flextable_output2 <- renderUI({
# 显示 HTML
HTML(html_table2[[3]])
})
# compareGroups 三线表 ----
data(regicor)
tab <- descrTable(year ~ . -id , regicor, hide.no = "no",
method=c(triglyc=2, tocv=2, todeath=2), sd.type = 3)
html_1 <-export2html(tab, header.background = "black", header.color = "white",
caption = "Summary by intervention group")
html_1 <- html_1 %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE) %>%
row_spec(0, bold = TRUE,
extra_css = "border-bottom: 1px solid black;
border-top: 1px solid black;") %>%
row_spec(26+2, extra_css = "border-bottom: 1px solid black;")
# %>% column_spec(1, extra_css = "border-bottom: 1px solid black;")
output$html <- renderUI({
# 将 flextable 转换为 HTML
HTML(html_1)
})
}
shinyApp(ui, server)
gaze(sex~.,data=regicor) %>% myft()
help(gaze)
gaze(sex~.,data=regicor) %>% myft()
gaze(sex+year~.,data=regicor) %>% myft()
runApp()
help(str_count)
library((tidyverse))
library(tidyverse)
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Add/update manifest file (optional; for Git backed deployment on Posit )
rsconnect::writeManifest()
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
## Add/update manifest file (optional; for Git backed deployment on Posit )
rsconnect::writeManifest()
## Add/update manifest file (optional; for Git backed deployment on Posit )
rsconnect::writeManifest()
rsconnect::deployApp(
appName = desc::desc_get_field("Package"),
appTitle = desc::desc_get_field("Package"),
appFiles = c(
# Add any additional files unique to your app here.
"R/",
"inst/",
"data/",
"md/",
"NAMESPACE",
"DESCRIPTION",
"app.R"
),
appId = rsconnect::deployments(".")$appID,
lint = FALSE,
forceUpdate = TRUE
)
data <- regicor
updateTextAreaInput()
help(updateTextAreaInput)
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 20, 10),
textAreaInput("inText", "Input textarea"),
textAreaInput("inText2", "Input textarea 2")
)
server <- function(input, output, session) {
observe({
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
# This will change the value of input$inText, based on x
updateTextAreaInput(session, "inText", value = paste("New text", x))
# Can also set the label, this time for input$inText2
updateTextAreaInput(session, "inText2",
label = paste("New label", x),
value = paste("New text", x))
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 20, 10),
textAreaInput("inText", "Input textarea"),
textAreaInput("inText2", "Input textarea 2")
)
server <- function(input, output, session) {
observe({
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
# This will change the value of input$inText, based on x
updateTextAreaInput(session, "inText", value = paste("New text", x))
# Can also set the label, this time for input$inText2
updateTextAreaInput(session, "inText2",
label = paste("New label", x),
value = paste("New text", x)),
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 20, 10),
textAreaInput("inText", "Input textarea"),
textAreaInput("inText2", "Input textarea 2")
)
server <- function(input, output, session) {
observe({
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
# This will change the value of input$inText, based on x
updateTextAreaInput(session, "inText", value = paste("New text", x))
# Can also set the label, this time for input$inText2
updateTextAreaInput(session, "inText2",
label = paste("New label", x),
value = paste("New text", x))
})
,
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 20, 10),
textAreaInput("inText", "Input textarea"),
textAreaInput("inText2", "Input textarea 2")
)
server <- function(input, output, session) {
observe({
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
# This will change the value of input$inText, based on x
updateTextAreaInput(session, "inText", value = paste("New text", x))
# Can also set the label, this time for input$inText2
updateTextAreaInput(session, "inText2",
label = paste("New label", x),
value = paste("New text", x))
})
print(input$inText1)
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 20, 10),
textAreaInput("inText", "Input textarea"),
textAreaInput("inText2", "Input textarea 2")
)
server <- function(input, output, session) {
observe({
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
# This will change the value of input$inText, based on x
updateTextAreaInput(session, "inText", value = paste("New text", x))
# Can also set the label, this time for input$inText2
updateTextAreaInput(session, "inText2",
label = paste("New label", x),
value = paste("New text", x))
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 20, 10),
textAreaInput("inText", "Input textarea"),
textAreaInput("inText2", "Input textarea 2")
)
server <- function(input, output, session) {
observe({
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
# This will change the value of input$inText, based on x
updateTextAreaInput(session, "inText", value = paste("New text", x))
# Can also set the label, this time for input$inText2
updateTextAreaInput(session, "inText2",
label = paste("New label", x),
value = paste("New text", x))
print(input$inText1)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 20, 10),
textAreaInput("inText", "Input textarea"),
textAreaInput("inText2", "Input textarea 2")
)
server <- function(input, output, session) {
observe({
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
# This will change the value of input$inText, based on x
updateTextAreaInput(session, "inText", value = paste("New text", x))
# Can also set the label, this time for input$inText2
updateTextAreaInput(session, "inText2",
label = paste("New label", x),
value = paste("New text", x))
print(input$inText2)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
expr<-"restab <- strataTable(descrTable(sex~year+age,data),'cv')"
eval(expr)
expr<-"strataTable(descrTable(sex~year+age,data),'cv')"
restab <- eval(expr)
help("eval")
expr<-parse(text = "restab <- strataTable(descrTable(sex~year+age,data),'cv')")
eval(expr)
library(compareGroups)
expr<-parse(text = "restab <- strataTable(descrTable(sex~year+age,data),'cv')")
eval(expr)
View(restab)
runApp()
help(export2html)
library(shiny)
library(tableone)
library(gtsummary)
library(compareGroups)
library(gaze)
help(gaze)
library(shiny)
library(tableone)
library(gtsummary)
library(compareGroups)
library(autoReg)
# UI 界面定义
ui <- fluidPage(
titlePanel("临床基线资料表生成器 - regicor 数据示例"),
sidebarLayout(
sidebarPanel(
# 选择分组变量（必选）
selectInput("group_var", "选择分组变量",
choices = c("sex", "diabetes", "htn"),  # 示例变量，需根据实际数据调整
selected = "sex"),
# 选择分层变量（可选）
selectInput("strata_var", "选择分层变量（可选）",
choices = c("None", "age_group", "smoke")),  # 示例变量
width = 3
),
mainPanel(
tabsetPanel(
tabPanel("tableone", verbatimTextOutput("tableone_output")),
tabPanel("gtsummary", gt::gt_output("gtsummary_output")),
tabPanel("compareGroups", verbatimTextOutput("comparegroups_output")),
tabPanel("gaze", verbatimTextOutput("gaze_output"))
)
)
)
)
# Server 逻辑定义
server <- function(input, output) {
# 加载 regicor 数据集（替换为实际数据）
data <- reactive({
regicor::regicor_data  # 假设 regicor 数据通过此方式加载
})
# 生成 tableone 表格
output$tableone_output <- renderPrint({
req(data())
group_var <- input$group_var
strata_var <- if (input$strata_var != "None") input$strata_var else NULL
# 定义需要分析的变量（根据实际数据调整）
vars <- c("age", "bmi", "chol", "smoke")
# 创建 TableOne 对象
table1 <- CreateTableOne(
vars = vars,
strata = c(group_var, strata_var),  # 支持分组+分层
data = data(),
includeNA = TRUE
)
# 打印结果
print(table1, showAllLevels = TRUE, nonnormal = "bmi")
})
# 生成 gtsummary 表格
output$gtsummary_output <- gt::render_gt({
req(data())
group_var <- input$group_var
strata_var <- if (input$strata_var != "None") input$strata_var else NULL
# 构建表格
data() %>%
tbl_summary(
by = all_of(group_var),
include = c("age", "bmi", "chol", "smoke"),  # 需调整变量
type = list(c("age", "bmi") ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
add_p() %>%
modify_header(label = "**变量**") %>%
as_gt()
})
# 生成 compareGroups 表格
output$comparegroups_output <- renderPrint({
req(data())
group_var <- input$group_var
strata_var <- if (input$strata_var != "None") input$strata_var else NULL
# 构建公式
formula <- as.formula(paste(group_var, "~ age + bmi + chol + smoke"))
# 执行比较
res <- compareGroups(formula, data = data())
# 生成并打印表格
createTable(res, show.p.overall = TRUE)
})
# 生成 gaze 表格
output$gaze_output <- renderPrint({
req(data())
group_var <- input$group_var
strata_var <- if (input$strata_var != "None") input$strata_var else NULL
# 使用 gaze 进行分组统计
gaze::gaze(
data = data(),
group_by = group_var,
variables = c("age", "bmi", "chol", "smoke"),
stats = list(continuous = c("mean_sd", "median_iqr"))
)
})
}
# 运行应用
shinyApp(ui, server)
# UI 界面定义
ui <- fluidPage(
titlePanel("临床基线资料表生成器 - regicor 数据示例"),
sidebarLayout(
sidebarPanel(
# 选择分组变量（必选）
selectInput("group_var", "选择分组变量",
choices = c("sex", "diabetes", "htn"),  # 示例变量，需根据实际数据调整
selected = "sex"),
# 选择分层变量（可选）
selectInput("strata_var", "选择分层变量（可选）",
choices = c("None", "age_group", "smoke")),  # 示例变量
width = 3
),
mainPanel(
tabsetPanel(
tabPanel("tableone", verbatimTextOutput("tableone_output")),
tabPanel("gtsummary", gt::gt_output("gtsummary_output")),
tabPanel("compareGroups", verbatimTextOutput("comparegroups_output")),
tabPanel("gaze", verbatimTextOutput("gaze_output"))
)
)
)
)
# Server 逻辑定义
server <- function(input, output) {
# 加载 regicor 数据集（替换为实际数据）
data <- reactive({
regicor
})
# 生成 tableone 表格
output$tableone_output <- renderPrint({
req(data())
group_var <- input$group_var
strata_var <- if (input$strata_var != "None") input$strata_var else NULL
# 定义需要分析的变量（根据实际数据调整）
vars <- c("age", "bmi", "chol", "smoke")
# 创建 TableOne 对象
table1 <- CreateTableOne(
vars = vars,
strata = c(group_var, strata_var),  # 支持分组+分层
data = data(),
includeNA = TRUE
)
# 打印结果
print(table1, showAllLevels = TRUE, nonnormal = "bmi")
})
# 生成 gtsummary 表格
output$gtsummary_output <- gt::render_gt({
req(data())
group_var <- input$group_var
strata_var <- if (input$strata_var != "None") input$strata_var else NULL
# 构建表格
data() %>%
tbl_summary(
by = all_of(group_var),
include = c("age", "bmi", "chol", "smoke"),  # 需调整变量
type = list(c("age", "bmi") ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
add_p() %>%
modify_header(label = "**变量**") %>%
as_gt()
})
# 生成 compareGroups 表格
output$comparegroups_output <- renderPrint({
req(data())
group_var <- input$group_var
strata_var <- if (input$strata_var != "None") input$strata_var else NULL
# 构建公式
formula <- as.formula(paste(group_var, "~ age + bmi + chol + smoke"))
# 执行比较
res <- compareGroups(formula, data = data())
# 生成并打印表格
createTable(res, show.p.overall = TRUE)
})
# 生成 gaze 表格
output$gaze_output <- renderPrint({
req(data())
group_var <- input$group_var
strata_var <- if (input$strata_var != "None") input$strata_var else NULL
# 使用 gaze 进行分组统计
gaze::gaze(
data = data(),
group_by = group_var,
variables = c("age", "bmi", "chol", "smoke"),
stats = list(continuous = c("mean_sd", "median_iqr"))
)
})
}
# 运行应用
shinyApp(ui, server)
runApp()
View(restab)
descrTable(sex ~ year,data)
strataTable(descrTable(sex ~ year,data),"cv")
class(strataTable(descrTable(sex ~ year,data),"cv"))
restab2 <- strataTable(descrTable(sex ~ year,data),"cv")
createTable(restab2)
export2html( restab2 )
export2md( restab2 )
export2md( restab2,format = "html" )
runApp()
html <- export2md( restab2,format = "html" )
html
html <- export2html( restab,format = "html" )
html <- export2html( restab)
restab <- descrTable(sex ~ year,data)
html <- export2html( restab)
runApp()
runApp()
html <- export2md( restab2,format = "html" )
html
print(html)
html <- export2html( restab)
html <- export2md( restab2,format = "html" )
html <- export2html( restab)
html
html <- export2md( restab2,format = "html" )
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
help(ggsurvplot)
ggsave
library(tidyverse)
help("ggsave")
runApp()
runApp()
runApp()
runApp()
